{"title":"数论基础-质数相关基础算法","uid":"a3e841aae6c2b2f6d824263a309c7163","slug":"数论基础-质数相关基础算法","date":"2022-09-15T16:00:00.000Z","updated":"2022-09-15T16:00:00.000Z","comments":true,"path":"api/articles/数论基础-质数相关基础算法.json","keywords":null,"cover":null,"content":"<h1>质数</h1>\n<h2 id=\"什么是质数（素数）\">什么是质数（素数）</h2>\n<p>质数就是一个<strong>大于1</strong>的整数，除了1和它本身以外，不能被其他自然数整除</p>\n<p><em>注意：1、0不是质数 质数是从2开始的</em></p>\n<h2 id=\"一些简单的性质\">一些简单的性质</h2>\n<ol>\n<li>质数x的约数只有1和x;</li>\n<li>任何一个正整数，要么是质数，要么可以分解为几个质数的积(唯一);</li>\n<li>质数定理 ： 1~n 中有 n/lnN 个质数</li>\n</ol>\n<h2 id=\"判定一个数是否是质数\">判定一个数是否是质数</h2>\n<p><em>试除法</em></p>\n<ol>\n<li>\n<p>最简单的试除法  O(n)</p>\n<p>x的约数只能是1~x,如果x是质数，那么除了1和x不能被其他数整除<br>\n很明显这个算法最坏会是O(n)的复杂度，但是显然实际运算不会达到这个复杂度，我们待会儿来分析一下</p>\n <figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">is_prime</span><span class=\"params\">(<span class=\"type\">int</span> n )</span></span>&#123;</span><br><span class=\"line\"> <span class=\"keyword\">if</span>(n&lt;<span class=\"number\">2</span>) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\"> <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">2</span>;i&lt;n;i++)&#123;</span><br><span class=\"line\">     <span class=\"keyword\">if</span>(n%i==<span class=\"number\">0</span>)</span><br><span class=\"line\">         <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"> <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>做一些简单的优化 0(n) --&gt; O(sqrt(n))</p>\n<p>上一个算法整体的思路是正确的，瓶颈在于n的大小，因为它最坏是0(n)的复杂度，那我们考虑优化就要从这个角度入手，看是否能够减少循环判断的次数。</p>\n<p>然后我们就会发现，其实根本不需要遍历到n-1。我们都知道X = sqrt(X)^2 , 那么很明显，当其中一个因数缩小，另外一个因数必然增大。由于我们考虑的是正整数范围，所以不存在因数是分数的情况，也就是说因数不能无限制缩小，最小应该是1。</p>\n<p>那么我们就只用关注1~sqrt(X) 这个范围，因为另外一半里必然跟前一半一一对应。</p>\n<p>所以这个算法就优化成了这样</p>\n <figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">is_prime</span><span class=\"params\">(<span class=\"type\">int</span> n )</span></span>&#123;</span><br><span class=\"line\"> <span class=\"keyword\">if</span>(n&lt;<span class=\"number\">2</span>) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\"> <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">2</span>;i&lt; = n/i;i++)&#123;</span><br><span class=\"line\">     <span class=\"keyword\">if</span>(n%i==<span class=\"number\">0</span>)</span><br><span class=\"line\">         <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"> <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>其实，大家可能已经发现了，其实这个循环的上限不是关键，关键是循环内的判断，因为一旦被整除，其实这个函数就已经返回false了。循环从2开始走，如果有约数，必然在2~sqrt(X)中有约数</p>\n</li>\n</ol>\n<h2 id=\"分解质因数\">分解质因数</h2>\n<p>试除法    O(logn) ~ O(sqrt(n))</p>\n<p><strong>算法思想</strong></p>\n<p>使用试除法，当遍历到可以整除的i时，让i循环除n并记录次数，然后输出质因子i和其次数ai</p>\n<p>最后如果n有剩余且大于1，就直接输出n和其次数1</p>\n<p><strong>代码如下:</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//从小到大枚举所有数 n中最多只包含一个大于sqrt(n)的质因子</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">divide</span><span class=\"params\">(<span class=\"type\">int</span> n)</span></span>&#123;</span><br><span class=\"line\"> <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">2</span>;i &lt;= n/i;i++)&#123;</span><br><span class=\"line\">     <span class=\"keyword\">if</span>(n%i==<span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">         <span class=\"type\">int</span> s = <span class=\"number\">0</span>;</span><br><span class=\"line\">         <span class=\"keyword\">while</span>(n%i==<span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">             n/=i;</span><br><span class=\"line\">             s++;</span><br><span class=\"line\">         &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">         <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d %d\\n&quot;</span>,i,s);</span><br><span class=\"line\">     &#125;     </span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"> <span class=\"keyword\">if</span>( n &gt; <span class=\"number\">1</span>) <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d %d\\n&quot;</span>,n,<span class=\"number\">1</span>);</span><br><span class=\"line\"> <span class=\"built_in\">puts</span>(<span class=\"string\">&quot;&quot;</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>为什么是这样的？</strong></p>\n<p><code> 首先，我们要知道n中最多只包含一个大于sqrt(n)的质因子，这个可以用反证法来证明，假如说存在两个大于sqrt(n)的质因子，那么两个质因子的一次方乘积就已经大于n了，故至多存在1个大于sqrt(n)的质因子。</code></p>\n<p>我们举一个例子，<code>n=33  </code></p>\n<p><code>33 = 3^1 * 11^1</code> ,也就是33的质因子是3和11，11是大于根号33的</p>\n<p>好，明白了这一点，我们就能明白为什么循环条件是到sqrt(n)，为什么最后还要再判断n&gt;1。我们在不断除质数的过程中其实n已经越来越小了，如果n是1说明已经恰好除尽。否则，就说明n还剩了一个大于根号n的质因子，那么我们直接输出就可以了。</p>\n<hr>\n<p><em>截止现在，我们学习了如何判断一个数是否是质数以及如何将一个数分解成为若干质因子的积</em></p>\n<p><em>那么，假设我现在需要知道1~n中质数的个数，怎么办呢？当然，你可以双层for循环解决，但如果n比较大呢？将近n^2的复杂度是不是有点儿高呢，那怎么办呢？</em></p>\n<p><strong>下面我们就要来说这个问题</strong></p>\n<h2 id=\"筛质数\">筛质数</h2>\n<p><em>筛质数要解决的问题就是快速求出n以内质数的个数</em></p>\n<ol>\n<li>\n<p>朴素筛</p>\n<p><strong>算法思想</strong></p>\n<p>既然用除法作试除法一个一个判断太耗时了，那我们可以反其道而行之，我们不用除法，改用乘法去把每个数的倍数筛掉，因为如果n是x的倍数，那么n必然就不是质数，因为它至少有x这个约数</p>\n<p>我们用这个思想就可以从2开始遍历，把每个数的倍数筛掉。</p>\n<p><strong>具体实现</strong></p>\n<p>在具体的实现中，我们是这么来做的。定义primes[N]存放质数，cnt累加质数的个数，st[N]用来标记一个数是否被筛掉，筛掉为true</p>\n<p>我们开始遍历，首先如果当前这个数没有被筛掉，那么它就是一个质数，我们把它放到primes中，然后累加。</p>\n<p>然后我们将n以内i的所有倍数筛掉</p>\n<p>这样这个算法就完成了</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//朴素筛 O(nlogn)</span></span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> N = <span class=\"number\">1000010</span> ;</span><br><span class=\"line\"><span class=\"type\">int</span> primes[N] , cnt;</span><br><span class=\"line\"><span class=\"type\">bool</span> st[N] ;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">get_primes</span><span class=\"params\">(<span class=\"type\">int</span> n)</span></span>&#123;</span><br><span class=\"line\"> <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">2</span>;i&lt;=n;i++)&#123;</span><br><span class=\"line\">     <span class=\"keyword\">if</span>(!st[i])&#123;</span><br><span class=\"line\">         primes[cnt++]=i;</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">     <span class=\"keyword\">for</span>(<span class=\"type\">int</span> j = i+i;j&lt;=n;j+=i) st[j] = <span class=\"literal\">true</span> ;</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>或许大家已经发现了，是否有一些数被多个i重复筛掉了，这里我们举一个简单的例子：8 = 2^3,很显然8会被2、4重复筛。</p>\n<p>接下来我们再来考虑一下如何去进一步的优化</p>\n</li>\n<li>\n<p>埃氏筛法</p>\n<p><strong>优化策略</strong></p>\n<p>其实只需要让n的质因子把n筛掉即可，如果i不是质数就不需要再筛i的倍数，大家可以思考一下。比如8=2^3,i=2就可以筛掉8，当i=4时，i其实是一个合数，就不用筛了，因为4的倍数一定也是2的倍数。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//质数定理 ： 1~n 中有 n/lnN 个质数 </span></span><br><span class=\"line\"><span class=\"comment\">//优化--&gt; O(nloglogn)  </span></span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> N = <span class=\"number\">1000010</span> ;</span><br><span class=\"line\"><span class=\"type\">int</span> primes[N] , cnt;</span><br><span class=\"line\"><span class=\"type\">bool</span> st[N] ;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">get_primes</span><span class=\"params\">(<span class=\"type\">int</span> n)</span></span>&#123;</span><br><span class=\"line\"> <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">2</span>;i&lt;=n;i++)&#123;</span><br><span class=\"line\">     <span class=\"keyword\">if</span>(!st[i])&#123;</span><br><span class=\"line\">         primes[cnt++]=i;</span><br><span class=\"line\">         <span class=\"keyword\">for</span>(<span class=\"type\">int</span> j = i+i;j&lt;=n;j+=i) st[j] = <span class=\"literal\">true</span> ;</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>那么可能大家又会想到，n会不会被多个质因子重复筛掉呢，想到这里，那博主真的要羡慕的哭出来了，毕竟当时想到这些的都是计算机界的dalao</p>\n<p><strong>线性筛法</strong>就是为了解决这个问题！</p>\n</li>\n<li>\n<p>线性筛法</p>\n<p><strong>优化策略</strong></p>\n<p>让每一个合数都只被自己的最小质因子筛掉</p>\n <figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//线性筛法  10^7</span></span><br><span class=\"line\"><span class=\"comment\">//n 只会被其最小质因子筛掉</span></span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> N = <span class=\"number\">1000010</span> ;</span><br><span class=\"line\"><span class=\"type\">int</span> primes[N] , cnt;</span><br><span class=\"line\"><span class=\"type\">bool</span> st[N] ;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">get_primes</span><span class=\"params\">(<span class=\"type\">int</span> n)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">2</span>;i&lt;=n;i++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(!st[i]) primes[cnt++]=i;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> j = <span class=\"number\">0</span>;primes[j] &lt;=n / i; j++ )&#123;</span><br><span class=\"line\">            st[primes[j]*i] = <span class=\"literal\">true</span> ;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(i%primes[j] == <span class=\"number\">0</span>) <span class=\"keyword\">break</span>; <span class=\"comment\">//primes[j]一定是i的最小质因子，</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">分析循环体</span><br><span class=\"line\"><span class=\"number\">1.</span> i%pj == <span class=\"number\">0</span></span><br><span class=\"line\">    pj一定是i的最小质因子，pj一定是i * pj 的最小质因子</span><br><span class=\"line\"><span class=\"number\">2.</span> i%pj!=<span class=\"number\">0</span></span><br><span class=\"line\">    pj一定小于i的所有质因子，pj也一定是i * pj的最小质因子</span><br><span class=\"line\"></span><br><span class=\"line\">所以说一个合数只会被自己的最小质因子筛掉</span><br></pre></td></tr></table></figure></li>\n</ol>\n","text":"质数 什么是质数（素数） 质数就是一个大于1的整数，除了1和它本身以外，不能被其他自然数整除 注意：1、0不是质数 质数是从2开始的 一些简单的性质 质数x的约...","permalink":"/post/数论基础-质数相关基础算法","photos":[],"count_time":{"symbolsCount":"3.6k","symbolsTime":"3 mins."},"categories":[{"name":"算法","slug":"算法","count":7,"path":"api/categories/算法.json"}],"tags":[{"name":"算法","slug":"算法","count":1,"path":"api/tags/算法.json"},{"name":"数论","slug":"数论","count":1,"path":"api/tags/数论.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\"><span class=\"toc-text\">质数</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%BB%80%E4%B9%88%E6%98%AF%E8%B4%A8%E6%95%B0%EF%BC%88%E7%B4%A0%E6%95%B0%EF%BC%89\"><span class=\"toc-text\">什么是质数（素数）</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%B8%80%E4%BA%9B%E7%AE%80%E5%8D%95%E7%9A%84%E6%80%A7%E8%B4%A8\"><span class=\"toc-text\">一些简单的性质</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%88%A4%E5%AE%9A%E4%B8%80%E4%B8%AA%E6%95%B0%E6%98%AF%E5%90%A6%E6%98%AF%E8%B4%A8%E6%95%B0\"><span class=\"toc-text\">判定一个数是否是质数</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%88%86%E8%A7%A3%E8%B4%A8%E5%9B%A0%E6%95%B0\"><span class=\"toc-text\">分解质因数</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E7%AD%9B%E8%B4%A8%E6%95%B0\"><span class=\"toc-text\">筛质数</span></a></li></ol></li></ol>","author":{"name":"尤一","slug":"blog-author","avatar":"img/cat.jpg","link":"/","description":"社畜码农，热爱设计，热爱编程，热爱生活。","socials":{"github":"https://github.com/StayOne1","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/","juejin":"","customs":{}}},"mapped":true,"hidden":false,"prev_post":{"title":"6 多重背包3","uid":"c5422bd2de84a2c9973c0e0db8b986a4","slug":"6 多重背包3","date":"2025-03-04T16:00:00.000Z","updated":"2025-03-07T14:19:30.163Z","comments":true,"path":"api/articles/6 多重背包3.json","keywords":null,"cover":null,"text":"题目描述 有 N种物品和一个容量是 V的背包。 第 i种物品最多有 si件，每件体积是 vi，价值是 wi。 求解将哪些物品装入背包，可使物品体积总和不超过背包...","permalink":"/post/6 多重背包3","photos":[],"count_time":{"symbolsCount":474,"symbolsTime":"1 mins."},"categories":[{"name":"算法","slug":"算法","count":7,"path":"api/categories/算法.json"}],"tags":[{"name":"动态规划","slug":"动态规划","count":6,"path":"api/tags/动态规划.json"},{"name":"背包","slug":"背包","count":6,"path":"api/tags/背包.json"},{"name":"模板题","slug":"模板题","count":5,"path":"api/tags/模板题.json"},{"name":"hard","slug":"hard","count":1,"path":"api/tags/hard.json"}],"author":{"name":"尤一","slug":"blog-author","avatar":"img/cat.jpg","link":"/","description":"社畜码农，热爱设计，热爱编程，热爱生活。","socials":{"github":"https://github.com/StayOne1","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/","juejin":"","customs":{}}},"feature":false},"next_post":{"title":"Git基础","uid":"7972c32d39f314ccb6f804289f8a291c","slug":"Git基础","date":"2022-09-02T16:00:00.000Z","updated":"2025-03-09T07:05:05.207Z","comments":true,"path":"api/articles/Git基础.json","keywords":null,"cover":[],"text":"Git学习 Git 是一个分布式版本控制系统，可以便捷高效地处理任何项目。Git的内容存储使用的是SHA-1哈希算法。 Git 工作流程 克隆 Git 资源作为...","permalink":"/post/Git基础","photos":[],"count_time":{"symbolsCount":"1.1k","symbolsTime":"1 mins."},"categories":[{"name":"Git","slug":"Git","count":1,"path":"api/categories/Git.json"}],"tags":[{"name":"Git","slug":"Git","count":1,"path":"api/tags/Git.json"}],"author":{"name":"尤一","slug":"blog-author","avatar":"img/cat.jpg","link":"/","description":"社畜码农，热爱设计，热爱编程，热爱生活。","socials":{"github":"https://github.com/StayOne1","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/","juejin":"","customs":{}}}}}