{"title":"JAVA设计模式之装饰模式","uid":"d8c5cdf794b98a3ee47186f592b0c059","slug":"JAVA设计模式之装饰模式","date":"2022-08-30T16:00:00.000Z","updated":"2022-08-31T16:00:00.000Z","comments":true,"path":"api/articles/JAVA设计模式之装饰模式.json","keywords":null,"cover":[],"content":"<h1>装饰模式</h1>\n<p>装饰器模式是为了在不改变原有类的结构的前提下，给一个现有的对象拓展新的功能。这种类型的设计模式属于结构性模式，它作为现有类的一个包装。</p>\n<p>这种模式为拓展类提供了新的解决方案，可以不使用继承的方式实现。</p>\n<hr>\n<p>优点：</p>\n<ul>\n<li>可以代替继承，减少子类的数量</li>\n<li>动态增加功能，动态撤销</li>\n</ul>\n<p>缺点：</p>\n<ul>\n<li>多层装饰比较复杂</li>\n</ul>\n<hr>\n<h2 id=\"装饰模式的基本结构\">装饰模式的基本结构</h2>\n<p>装饰模式以对客户透明的方式动态地给一个对象附加上更多的责任。换言之，客户端并不会觉得对象在装饰前和装饰后有什么不同。装饰模式可以在不使用创造更多子类的情况下，将对象的功能加以扩展。</p>\n<p>装饰模式类图如下：</p>\n<img src=\"/post/JAVA%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E8%A3%85%E9%A5%B0%E6%A8%A1%E5%BC%8F/装饰模式基本结构.jpg\">\n<p>装饰模式中的角色有：</p>\n<ul>\n<li>抽象构件(Component) ： 给出一个抽象接口，以规范准备接收附加责任的对象。</li>\n<li>具体构件(ConcreteComponent) : 定义一个将要接收附加责任的类。</li>\n<li>装饰角色(Decerator) : 持有一个构件(Component)对象的实例，并定义一个与抽象构件接口一致的接口。</li>\n<li>具体装饰(ConcreteDecorator)角色 : 负责给构件对象“贴上”附加的责任。</li>\n</ul>\n<p>源代码：</p>\n<p>抽象构件：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">Component</span> &#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">sampleOperation</span><span class=\"params\">()</span>;</span><br><span class=\"line\">    </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>具体构件 ：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ConcreteComponent</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">Component</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">sampleOperation</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 写相关的业务代码</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>装饰角色：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Decorator</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">Component</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Component component;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">Decorator</span><span class=\"params\">(Component component)</span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.component = component;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">sampleOperation</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 委派给构件</span></span><br><span class=\"line\">        component.sampleOperation();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>具体装饰角色：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ConcreteDecoratorA</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">Decorator</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">ConcreteDecoratorA</span><span class=\"params\">(Component component)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">super</span>(component);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">sampleOperation</span><span class=\"params\">()</span> &#123;　　　　　<span class=\"built_in\">super</span>.sampleOperation();</span><br><span class=\"line\">        <span class=\"comment\">// 写相关的业务代码</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<hr>\n<h2 id=\"齐天大圣的例子\">齐天大圣的例子</h2>\n<p>类图 ：</p>\n<img src=\"/post/JAVA%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E8%A3%85%E9%A5%B0%E6%A8%A1%E5%BC%8F/齐天大圣.png\">\n<hr>\n<h2 id=\"装饰模式是Java-I-O的基本模式\">装饰模式是Java I/O的基本模式</h2>\n<p>由于Java I/O库需要很多性能的各种组合，如果这些性能都是用继承的方法实现的，那么每一种组合都需要一个类，这样就会造成大量性能重复的类出现。而如果采用装饰模式，那么类的数目就会大大减少，性能的重复也可以减至最少。因此装饰模式是Java I/O库的基本模式。</p>\n<p>InputStream的对象结构图如下：</p>\n<img src=\"/post/JAVA%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E8%A3%85%E9%A5%B0%E6%A8%A1%E5%BC%8F/InputStream.png\">\n<p>根据上图可以看出：</p>\n<ul>\n<li>\n<p>Component：由InputStream扮演。这是一个抽象类，为各种子类型提供统一的接口。</p>\n</li>\n<li>\n<p>ConcreteComponent：由ByteArrayInputStream、FileInputStream、PipedInputStream、StringBufferInputStream等类扮演。它们实现了抽象构件角色所规定的接口。</p>\n</li>\n<li>\n<p>Decorator：由FilterInputStream扮演。它实现了InputStream所规定的接口。</p>\n</li>\n<li>\n<p>ConcreteDecorator：由几个类扮演，分别是BufferedInputStream、DataInputStream以及两个不常用到的类LineNumberInputStream、PushbackInputStream。</p>\n</li>\n</ul>\n<h2 id=\"BufferedReader\">BufferedReader</h2>\n<p>类图：</p>\n<img src=\"/post/JAVA%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E8%A3%85%E9%A5%B0%E6%A8%A1%E5%BC%8F/BufferedReader设计模式类图.png\">\n<p>在其设计中Readable是抽象构件，Reader则是一个装饰角色，BufferedReader是具体装饰角色，对Reader对象进行了包装。BufferedReader内定义了readLine、fill等方法，使用字符数组作为缓冲区，进而提高读入速度，同时提供了便捷的toString方法，可以直接返回字符串。</p>\n<hr>\n<p>参考文章：</p>\n<p><a href=\"https://www.jianshu.com/p/d7f20ae63186\">设计模式详解——装饰者模式</a></p>\n<p><a href=\"https://www.runoob.com/design-pattern/decorator-pattern.html\">菜鸟教程</a></p>\n<p><a href=\"https://blog.csdn.net/weixin_43767015/article/details/119991474\">刘java</a></p>\n","text":"装饰模式 装饰器模式是为了在不改变原有类的结构的前提下，给一个现有的对象拓展新的功能。这种类型的设计模式属于结构性模式，它作为现有类的一个包装。 这种模式为拓展...","permalink":"/post/JAVA设计模式之装饰模式","photos":[],"count_time":{"symbolsCount":"2.1k","symbolsTime":"2 mins."},"categories":[{"name":"JAVA","slug":"JAVA","count":1,"path":"api/categories/JAVA.json"}],"tags":[{"name":"JAVA","slug":"JAVA","count":1,"path":"api/tags/JAVA.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\"><span class=\"toc-text\">装饰模式</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E8%A3%85%E9%A5%B0%E6%A8%A1%E5%BC%8F%E7%9A%84%E5%9F%BA%E6%9C%AC%E7%BB%93%E6%9E%84\"><span class=\"toc-text\">装饰模式的基本结构</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E9%BD%90%E5%A4%A9%E5%A4%A7%E5%9C%A3%E7%9A%84%E4%BE%8B%E5%AD%90\"><span class=\"toc-text\">齐天大圣的例子</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E8%A3%85%E9%A5%B0%E6%A8%A1%E5%BC%8F%E6%98%AFJava-I-O%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%A8%A1%E5%BC%8F\"><span class=\"toc-text\">装饰模式是Java I&#x2F;O的基本模式</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#BufferedReader\"><span class=\"toc-text\">BufferedReader</span></a></li></ol></li></ol>","author":{"name":"尤一","slug":"blog-author","avatar":"img/cat.jpg","link":"/","description":"社畜码农，热爱设计，热爱编程，热爱生活。","socials":{"github":"https://github.com/StayOne1","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/","juejin":"","customs":{}}},"mapped":true,"hidden":false,"prev_post":{"title":"SQL","uid":"6fc8774f334f99b8964d2d8c2cdc313c","slug":"sql","date":"2022-08-31T16:00:00.000Z","updated":"2022-08-31T16:00:00.000Z","comments":true,"path":"api/articles/sql.json","keywords":null,"cover":null,"text":"这个主要是整理之前学习时的笔记 持续更新 欢迎大家留言 批评指正 SQL SQL通用语法 SQL语句可以单行或多行书写，以分号结尾。 可以使用空格和缩进提高可读...","permalink":"/post/sql","photos":[],"count_time":{"symbolsCount":"8.6k","symbolsTime":"8 mins."},"categories":[{"name":"数据库","slug":"数据库","count":1,"path":"api/categories/数据库.json"}],"tags":[{"name":"sql","slug":"sql","count":1,"path":"api/tags/sql.json"}],"author":{"name":"尤一","slug":"blog-author","avatar":"img/cat.jpg","link":"/","description":"社畜码农，热爱设计，热爱编程，热爱生活。","socials":{"github":"https://github.com/StayOne1","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/","juejin":"","customs":{}}}},"next_post":{}}